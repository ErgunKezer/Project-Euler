import java.math.BigInteger;
import java.util.stream.IntStream;

public class Project20 {
    public static void main(String[] args) {

        int resultI=0;
        System.out.println(recur(100));
        String result=String.valueOf(recur(100));
        char[] resultA=result.toCharArray();
        for (int i=0;i<resultA.length;i++){
            resultI+=Integer.valueOf(resultA[i])-'0';
        }
        System.out.println("Normal result is "+resultI);

        //Solving with stream 
        BigInteger re= IntStream.rangeClosed(1,100)
                .mapToObj(BigInteger::valueOf)
                .reduce(BigInteger::multiply).get();
        int resultStream=re.toString().chars()
                .map(a->(char)a)
                .map(b->Character.getNumericValue(b))
                .reduce(Integer::sum).getAsInt();

        System.out.println("Stream result is "+resultStream);

    }
    private static BigInteger recur(int i){
        BigInteger factorial=BigInteger.ONE;
        BigInteger f=BigInteger.valueOf(i);
        if (i==1)
            return factorial;
        else
            return f.multiply(recur(i-1));
    }
}
